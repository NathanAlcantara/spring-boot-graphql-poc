schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    createAuthor(author: InputAuthor!): Author
    createNote(note: String!, authorId: ID!): Note
    changeAuthorName(authorNameInput: ChangeAuthorNameInput!): ChangeAuthorPayload
    changeAuthorEmail(authorEmailInput: ChangeAuthorEmailInput!): ChangeAuthorPayload
    changeNote(noteInput: ChangeNoteInput!): ChangeNotePayload
    deleteAuthor(id: ID!): DeleteAuthorPayload
    deleteAuthorNotes(authorID: ID!): DeleteAuthorNotesPayload
    deleteNote(id: ID!): DeleteNotePayload
}

type Query {
    note(id: ID!): Note
    notes: [Note]
    author(id: ID!): Author
    authors: [Author]
}

type Author {
    id: ID!
    name: String!
    email: String!
    notes: [Note!]
}

type Note {
    id: ID!
    note: String!
    createdOn : String
    author: Author!
}

input InputAuthor {
    name: String!
    email: String!
}

input ChangeAuthorNameInput {
    id: ID!
    name: String!
}

input ChangeAuthorEmailInput {
    id: ID!
    email: String!
}

input ChangeNoteInput {
    id: ID!
    note: String!
}

type ChangeAuthorPayload {
    success: Boolean!
    author: Author!
}

type ChangeNotePayload {
    success: Boolean!
    note: Note!
}

type DeleteAuthorPayload {
    success: Boolean!
}

type DeleteAuthorNotesPayload {
    success: Boolean!
    author: Author!
}

type DeleteNotePayload {
    success: Boolean!
}